/*
 * This file is generated by jOOQ.
 */
package me.aa07.parautil.database.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import me.aa07.parautil.database.Indexes;
import me.aa07.parautil.database.Keys;
import me.aa07.parautil.database.ParadiseMc;
import me.aa07.parautil.database.tables.records.LinkTokensRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LinkTokens extends TableImpl<LinkTokensRecord> {

    private static final long serialVersionUID = -1024985402;

    /**
     * The reference instance of <code>paradise_mc.link_tokens</code>
     */
    public static final LinkTokens LINK_TOKENS = new LinkTokens();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LinkTokensRecord> getRecordType() {
        return LinkTokensRecord.class;
    }

    /**
     * The column <code>paradise_mc.link_tokens.uuid</code>.
     */
    public final TableField<LinkTokensRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>paradise_mc.link_tokens.token</code>.
     */
    public final TableField<LinkTokensRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>paradise_mc.link_tokens.ip</code>.
     */
    public final TableField<LinkTokensRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>paradise_mc.link_tokens.creation_time</code>.
     */
    public final TableField<LinkTokensRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("current_timestamp()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * Create a <code>paradise_mc.link_tokens</code> table reference
     */
    public LinkTokens() {
        this(DSL.name("link_tokens"), null);
    }

    /**
     * Create an aliased <code>paradise_mc.link_tokens</code> table reference
     */
    public LinkTokens(String alias) {
        this(DSL.name(alias), LINK_TOKENS);
    }

    /**
     * Create an aliased <code>paradise_mc.link_tokens</code> table reference
     */
    public LinkTokens(Name alias) {
        this(alias, LINK_TOKENS);
    }

    private LinkTokens(Name alias, Table<LinkTokensRecord> aliased) {
        this(alias, aliased, null);
    }

    private LinkTokens(Name alias, Table<LinkTokensRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> LinkTokens(Table<O> child, ForeignKey<O, LinkTokensRecord> key) {
        super(child, key, LINK_TOKENS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ParadiseMc.PARADISE_MC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LINK_TOKENS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<LinkTokensRecord> getPrimaryKey() {
        return Keys.KEY_LINK_TOKENS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<LinkTokensRecord>> getKeys() {
        return Arrays.<UniqueKey<LinkTokensRecord>>asList(Keys.KEY_LINK_TOKENS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LinkTokens as(String alias) {
        return new LinkTokens(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LinkTokens as(Name alias) {
        return new LinkTokens(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LinkTokens rename(String name) {
        return new LinkTokens(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LinkTokens rename(Name name) {
        return new LinkTokens(name, null);
    }
}
